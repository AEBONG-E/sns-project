# GitHub Actions 워크플로우 이름
name: Deploy with Heroku CLI

# 워크플로우 실행 트리거 설정
on:
  push:
    branches: [ main ]      # main 브랜치에 push가 발생할 때 실행
  workflow_dispatch:        # Actions 탭에서 수동으로 실행할 수 있도록 허용

jobs:
  deploy:
    runs-on: ubuntu-latest  # GitHub Actions가 사용할 OS 환경

    steps:
      # 1. GitHub Repository 코드 체크아웃
      - name: Checkout source code
        uses: actions/checkout@v3

      # 2. JDK 17 설치 (Gradle 빌드를 위해 필요)
      - name: Set up JDK 17
        uses: actions/setup-java@v3
        with:
          distribution: 'temurin'      # OpenJDK 배포판 중 하나
          java-version: 17            # JDK 17 사용

      # 3. Heroku CLI 설치
      - name: Install Heroku CLI
        run: |
          curl https://cli-assets.heroku.com/install.sh | sh

      # 4. Heroku CLI 로그인 (API Key를 사용한 인증)
      - name: Heroku CLI login
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}  # GitHub Secrets에 저장된 Heroku API Key
        run: |
          echo "$HEROKU_API_KEY" | heroku auth:token     # 인증 토큰 설정
          heroku whoami                                  # 현재 로그인된 Heroku 사용자 확인

      # 5. 현재 로컬 git repository에 Heroku 원격 저장소 등록
      - name: Set git remote for Heroku
        run: heroku git:remote --app fc-sns              # fc-sns라는 Heroku 앱에 git push 할 수 있도록 remote 설정

      # 6. Gradle을 사용하여 애플리케이션 빌드 (JAR 파일 생성)
      - name: Build project
        run: ./gradlew clean build                       # 기존 빌드 삭제 후 새 빌드 수행

      # 7. Heroku로 git push 하여 배포
      - name: Deploy to Heroku (git push)
        env:
          HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}  # Heroku CLI 명령어 사용을 위한 인증 정보
        run: |
          git push heroku HEAD:main              # 현재 브랜치를 Heroku remote 에 푸시
